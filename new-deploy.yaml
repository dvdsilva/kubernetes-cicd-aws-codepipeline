apiVersion: v1
kind: Namespace
metadata:
  name: web-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webcolor-blue
  namespace: web-demo
  labels:
    app: webcolor-blue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webcolor-blue
  template:
    metadata:
      labels:
        app: webcolor-blue
    spec:
      containers:
        - name: webcolor-blue
          image: 336578185725.dkr.ecr.us-east-2.amazonaws.com/nodejs-blue:latest  # DockerHub
          ports:
            - name: http
              containerPort: 3000   # Porta do container
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: webcolor-blue-svc
  namespace: web-demo
  labels:
    app: webcolor-blue
spec:
  type: NodePort
  selector:
    app: webcolor-blue
  ports:
    - name: http
      port: 80         # Porta que ser√° exposta internamente no cluster
      targetPort: 3000 # Redireciona para a porta do container
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webcolor-blue-ing
  namespace: web-demo
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/success-codes: '200-399'
    # external-dns.alpha.kubernetes.io/hostname: webcolor-blue.example.com
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: webcolor-blue-svc
                port:
                  number: 80